// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String
  password    String
  startupName String
  startupUrl  String?
  createdAt   DateTime  @default(now())
  updates     Update[]
  status      Status?
  polls        Poll[]
  votedOptions PollOption[] @relation("UserVotes")
}
model Update {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Status {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  status    String
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Poll {
  id        Int      @id @default(autoincrement())
  question  String
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  options   PollOption[]
}

model PollOption {
  id      Int      @id @default(autoincrement())
  text    String
  votes   Int      @default(0)
  pollId  Int
  poll    Poll     @relation(fields: [pollId], references: [id])
  voters  User[]   @relation("UserVotes")
}

// Update User model to include polls relationship
